name: Publish

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ main ]

jobs:
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    environment: default
    # Only run if CI workflow completed successfully and the triggering event was a push to main
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'push' &&
      github.event.workflow_run.head_branch == 'main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Setup Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Check if publish is needed
        id: check_publish_needed
        run: |
          # Get the commit SHA from the workflow_run event
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          
          # Check if any relevant files changed in the triggering commit
          CHANGED_FILES=$(git diff --name-only $COMMIT_SHA~1 $COMMIT_SHA)
          
          # Files that should trigger a publish
          RELEVANT_PATTERNS="^(src/|Cargo\.toml|Cargo\.lock|tests/)"
          
          # Files/patterns that should NOT trigger a publish
          IGNORE_PATTERNS="^(.*\.md$|samples/|\.github/workflows/ci\.yml$|doap\.ttl$|LICENSE$)"
          
          echo "Changed files in commit $COMMIT_SHA:"
          echo "$CHANGED_FILES"
          
          # Check if any relevant files changed and no ignore patterns match
          SHOULD_PUBLISH=false
          for file in $CHANGED_FILES; do
            if echo "$file" | grep -qE "$RELEVANT_PATTERNS"; then
              if ! echo "$file" | grep -qE "$IGNORE_PATTERNS"; then
                SHOULD_PUBLISH=true
                echo "Relevant file changed: $file"
                break
              fi
            fi
          done
          
          echo "should_publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
          echo "Should publish: $SHOULD_PUBLISH"

      - name: Bump version
        id: bump_version
        if: steps.check_publish_needed.outputs.should_publish == 'true'
        run: |
          # Get the current version from Cargo.toml
          CURRENT_VERSION=$(grep -m 1 '^version = ' Cargo.toml | cut -d '"' -f 2)
          echo "Current version: $CURRENT_VERSION"

          # Parse the version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Increment the patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"

          # Update the version in Cargo.toml
          sed -i "s/^version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" Cargo.toml

          # Also update Cargo.lock
          cargo update -p rdfless

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Check if version exists on crates.io
        id: check_version
        if: steps.check_publish_needed.outputs.should_publish == 'true'
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}

          # Check if this version already exists on crates.io
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://crates.io/api/v1/crates/rdfless/$NEW_VERSION)

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "Version $NEW_VERSION already exists on crates.io."
            echo "should_publish=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "Version $NEW_VERSION is new and can be published."
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and tag new version
        if: steps.check_version.outputs.should_publish == 'true'
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}

          git add Cargo.toml Cargo.lock
          git commit -m "Bump version to $NEW_VERSION [skip ci]"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Publish to crates.io
        if: steps.check_version.outputs.should_publish == 'true'
        run: |
          cargo login ${{ secrets.CRATES_IO_TOKEN }}
          cargo publish --no-verify

#      - name: Install Debian packaging tools
#        if: steps.check_version.outputs.should_publish == 'true'
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y devscripts debhelper build-essential lintian dput gnupg

#      - name: Build Debian source package
#        if: steps.check_version.outputs.should_publish == 'true'
#        run: |
#          debclean || true
#          debuild -S -sa -us -uc

#      - name: Import Launchpad GPG key
#        if: steps.check_version.outputs.should_publish == 'true'
#        env:
#          LAUNCHPAD_GPG_KEY: ${{ secrets.LAUNCHPAD_GPG_KEY }}
#        run: |
#          echo "$LAUNCHPAD_GPG_KEY" | gpg --batch --import

#      - name: Sign .changes and .dsc files
#        if: steps.check_version.outputs.should_publish == 'true'
#        env:
#          LAUNCHPAD_GPG_PASSPHRASE: ${{ secrets.LAUNCHPAD_GPG_PASSPHRASE }}
#          LAUNCHPAD_USERNAME: ${{ secrets.LAUNCHPAD_USERNAME }}
#        run: |
#          CHANGES_FILE=$(ls ../*.changes | head -n1)
#          debsign -k$LAUNCHPAD_USERNAME -p"gpg --batch --yes --passphrase $LAUNCHPAD_GPG_PASSPHRASE --pinentry-mode loopback --detach-sign" $CHANGES_FILE

#      - name: Upload to Launchpad PPA
#        if: steps.check_version.outputs.should_publish == 'true'
#        env:
#          LAUNCHPAD_USERNAME: ${{ secrets.LAUNCHPAD_USERNAME }}
#        run: |
#          echo "[larsw42-ppa]" > ~/.dput.cf
#          echo "fqdn = ppa.launchpad.net" >> ~/.dput.cf
#          echo "incoming = ~larsw42/ubuntu/rdfless/" >> ~/.dput.cf
#          echo "login = $LAUNCHPAD_USERNAME" >> ~/.dput.cf
#          echo "method = ftp" >> ~/.dput.cf
#          echo "allow_unsigned_uploads = 0" >> ~/.dput.cf
#          CHANGES_FILE=$(ls ../*.changes | head -n1)
#          dput larsw42-ppa $CHANGES_FILE

      - name: Build Linux binary
        if: steps.check_version.outputs.should_publish == 'true'
        run: |
          cargo build --release
          upx --best --lzma target/release/rdfless || echo "UPX not found or failed, skipping compression."
          cp target/release/rdfless target/release/rdfless-linux-x86_64

      - name: Build Windows binary
        if: steps.check_version.outputs.should_publish == 'true'
        run: |
          cargo build --release --target x86_64-pc-windows-gnu
          upx --best --lzma target/x86_64-pc-windows-gnu/release/rdfless.exe || echo "UPX not found or failed, skipping compression."
          cp target/x86_64-pc-windows-gnu/release/rdfless.exe target/release/rdfless-windows-x86_64.exe

      - name: Build MacOS binary
        if: steps.check_version.outputs.should_publish == 'true'
        run: |
          cargo build --release --target x86_64-apple-darwin
          upx --best --lzma target/x86_64-apple-darwin/release/rdfless || echo "UPX not found or failed, skipping compression."
          cp target/x86_64-apple-darwin/release/rdfless target/release/rdfless-macos-x86_64

 #     - name: Find .deb package
 #       id: find_deb
 #       if: steps.check_version.outputs.should_publish == 'true'
 #       run: |
 #         echo "deb_path=$(ls target/debian/*.deb | head -n1)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.check_version.outputs.should_publish == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          name: Release v${{ steps.bump_version.outputs.new_version }}
          body: |
            Automated release of rdfless v${{ steps.bump_version.outputs.new_version }}
          files: |
            target/release/rdfless-linux-x86_64
            target/release/rdfless-windows-x86_64.exe
            target/release/rdfless-macos-x86_64
            ${{ steps.find_deb.outputs.deb_path }}
