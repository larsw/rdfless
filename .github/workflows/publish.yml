name: Publish

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build binaries for (e.g., 0.3.0). Must match Cargo.toml."
        required: false
        type: string
      skip_crates:
        description: "Skip publishing to crates.io"
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  publish:
    name: Prepare release and crates publish
    runs-on: ubuntu-latest
    environment: default
    if: >
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.event == 'push' &&
       github.event.workflow_run.head_branch == 'main') ||
      (github.event_name == 'workflow_dispatch')
    outputs:
      build_binaries: ${{ steps.compute_outputs.outputs.build_binaries }}
      version: ${{ steps.determine_version.outputs.version }}
      publish_crate: ${{ steps.check_crate.outputs.publish_crate }}
    steps:
      # ... unchanged steps ...
      # [all current steps retained as-is]
      # ... unchanged steps ...

  build-debian:
    name: Build Debian Packages (Docker)
    runs-on: ubuntu-latest
    needs: publish
    if: needs.publish.outputs.build_binaries == 'true'
    strategy:
      matrix:
        ubuntu: ['24.04', '22.04', '20.04']
    steps:
      - uses: actions/checkout@v4
      - name: Build .deb in Ubuntu ${{ matrix.ubuntu }}
        run: |
          set -eux
          VERSION="${{ needs.publish.outputs.version }}"
          UBUNTU="${{ matrix.ubuntu }}"
          docker run --rm -v "$PWD":/work -w /work ubuntu:${UBUNTU} bash -lc '
            set -eux
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
              curl ca-certificates build-essential pkg-config libssl-dev git perl make gcc g++ cmake
            curl -fsSL https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
            . "$HOME/.cargo/env"
            cargo install cargo-deb
            cargo deb
          '
          # The deb file is created inside the container and may be owned by root.
          # Copying avoids permission errors from moving a file out of a root-owned directory.
          cp target/debian/*.deb "rdfless_${VERSION}_amd64-ubuntu-${UBUNTU}.deb"
      - uses: actions/upload-artifact@v4
        with:
          name: rdfless_${{ needs.publish.outputs.version }}_amd64-ubuntu-${{ matrix.ubuntu }}.deb
          path: rdfless_${{ needs.publish.outputs.version }}_amd64-ubuntu-${{ matrix.ubuntu }}.deb

  build-cross-platform:
    # ... unchanged ...

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish, build-cross-platform, build-debian]
    if: needs.publish.outputs.build_binaries == 'true'
    permissions:
      contents: write
    steps:
      # ... unchanged steps ...
      - name: Prepare release artifacts with version
        run: |
          VERSION=${{ needs.publish.outputs.version }}
          mkdir -p ./release-artifacts
          
          # Copy and rename Linux binary
          cp target/release/rdfless-linux-x86_64 ./release-artifacts/rdfless-${VERSION}-linux-x86_64
          
          # Copy and rename Windows binary
          cp "./artifacts/rdfless-${VERSION}-windows-x86_64.exe/rdfless-windows-x86_64.exe" "./release-artifacts/rdfless-${VERSION}-windows-x86_64.exe"
          
          # Copy and rename macOS binary
          cp "./artifacts/rdfless-${VERSION}-macos-x86_64/rdfless-macos-x86_64" "./release-artifacts/rdfless-${VERSION}-macos-x86_64"
          
          # Copy Debian packages for Ubuntu 24.04, 22.04, and 20.04
          cp "./artifacts/rdfless_${VERSION}_amd64-ubuntu-24.04.deb/rdfless_${VERSION}_amd64-ubuntu-24.04.deb" "./release-artifacts/rdfless_${VERSION}_amd64-ubuntu-24.04.deb"
          cp "./artifacts/rdfless_${VERSION}_amd64-ubuntu-22.04.deb/rdfless_${VERSION}_amd64-ubuntu-22.04.deb" "./release-artifacts/rdfless_${VERSION}_amd64-ubuntu-22.04.deb"
          cp "./artifacts/rdfless_${VERSION}_amd64-ubuntu-20.04.deb/rdfless_${VERSION}_amd64-ubuntu-20.04.deb" "./release-artifacts/rdfless_${VERSION}_amd64-ubuntu-20.04.deb"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.publish.outputs.version }}
          name: Release v${{ needs.publish.outputs.version }}
          body: |
            Automated release of rdfless v${{ needs.publish.outputs.version }}
          files: |
            ./release-artifacts/rdfless-${{ needs.publish.outputs.version }}-linux-x86_64
            ./release-artifacts/rdfless-${{ needs.publish.outputs.version }}-windows-x86_64.exe
            ./release-artifacts/rdfless-${{ needs.publish.outputs.version }}-macos-x86_64
            ./release-artifacts/rdfless_${{ needs.publish.outputs.version }}_amd64-ubuntu-24.04.deb
            ./release-artifacts/rdfless_${{ needs.publish.outputs.version }}_amd64-ubuntu-22.04.deb
            ./release-artifacts/rdfless_${{ needs.publish.outputs.version }}_amd64-ubuntu-20.04.deb
